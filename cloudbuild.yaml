steps:
  # Step 1: Check/create Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud artifacts repositories describe vamsi-artifact-repo --location=asia-east1 --project=enhub-cloud-interns; then
          echo "Repository doesn't exist. Creating now."
          gcloud artifacts repositories create vamsi-artifact-repo --repository-format=docker --location=asia-east1 --project=enhub-cloud-interns
        else
          echo "Repository already exists."
        fi

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'asia-east1-docker.pkg.dev/enhub-cloud-interns/vamsi-artifact-repo/my-app:latest', '.']

  # Step 3: Push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'asia-east1-docker.pkg.dev/enhub-cloud-interns/vamsi-artifact-repo/my-app:latest']

  # Step 4: Delete existing VM (if any)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deleting VM if it exists..."
        gcloud compute instances delete my-vm-instance --zone=asia-east1-b --quiet || true

  # Step 5: Create VM
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - compute
      - instances
      - create
      - my-vm-instance
      - --zone=asia-east1-b
      - --machine-type=e2-micro
      - --image-family=debian-11
      - --image-project=debian-cloud
      - --boot-disk-size=10GB
      - --tags=http-server,https-server
      - --scopes=https://www.googleapis.com/auth/cloud-platform
      - --service-account=1064351983714-compute@developer.gserviceaccount.com
      - --project=enhub-cloud-interns

  # Step 6: Pull and save Docker image
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker pull asia-east1-docker.pkg.dev/enhub-cloud-interns/vamsi-artifact-repo/my-app:latest
        docker save -o my-app.tar asia-east1-docker.pkg.dev/enhub-cloud-interns/vamsi-artifact-repo/my-app:latest

  # Step 7: SCP Docker image to VM
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - compute
      - scp
      - my-app.tar
      - sajja_vamsi@my-vm-instance:~
      - --zone=asia-east1-b
      - --project=enhub-cloud-interns

  # Step 8: Load Docker image & run it on VM
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute ssh sajja_vamsi@my-vm-instance \
          --zone=asia-east1-b \
          --project=enhub-cloud-interns \
          --command='sudo docker load -i my-app.tar && sudo docker run -d -p 8080:8080 asia-east1-docker.pkg.dev/enhub-cloud-interns/vamsi-artifact-repo/my-app:latest'

  # Step 9: Check app and fetch secret
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking if application is running..."
        if gcloud compute ssh my-vm-instance --zone=asia-east1-b --project=enhub-cloud-interns --command='curl -s http://localhost:8080' &>/dev/null; then
          echo "Application is running. Fetching secret..."
          gcloud compute ssh my-vm-instance --zone=asia-east1-b --project=enhub-cloud-interns --command='gcloud secrets versions access 1 --secret=my-app-secret --project=enhub-cloud-interns'
        else
          echo "Application is NOT running. Skipping secret fetch."
        fi

images:
  - 'asia-east1-docker.pkg.dev/enhub-cloud-interns/vamsi-artifact-repo/my-app:latest'

options:
  logging: CLOUD_LOGGING_ONLY
